<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">
<erlref>
<header>
<title>edis_util</title>
<prepared></prepared>
<responsible></responsible>
<docno>1</docno>
<approved></approved>
<checked></checked>
<date></date>
<rev>A</rev>
<file>edis_util.xml</file></header>
<module>edis_util</module>
<modulesummary>edis utilities.</modulesummary>
<description>
<p>edis utilities</p></description>
<funcs>
<func>
<name>timestamp() -&gt; float()</name>
<fsummary>Current timestamp.</fsummary>

<desc><marker id="timestamp-0"/>

<p>Current timestamp</p>
</desc></func>
<func>
<name>now() -&gt; pos_integer()</name>
<fsummary>UTC in *NIX seconds.</fsummary>

<desc><marker id="now-0"/>

<p>UTC in *NIX seconds</p>
</desc></func>
<func>
<name>upper(Bin::binary()) -&gt; binary()</name>
<fsummary>converts all characters in the specified binary to uppercase.</fsummary>

<desc><marker id="upper-1"/>

<p>converts all characters in the specified binary to uppercase.</p>
</desc></func>
<func>
<name>lower(Bin::binary()) -&gt; binary()</name>
<fsummary>converts all characters in the specified binary to lowercase.</fsummary>

<desc><marker id="lower-1"/>

<p>converts all characters in the specified binary to lowercase</p>
</desc></func>
<func>
<name>binary_to_integer(Bin::binary()) -&gt; integer()</name>
<fsummary>returns an integer whose binary representation is Bin.</fsummary>

<desc><marker id="binary_to_integer-1"/>

<p>returns an integer whose binary representation is Bin</p>
</desc></func>
<func>
<name>binary_to_float(Bin::binary()) -&gt; integer()</name>
<fsummary>returns a float whose binary representation is Bin.</fsummary>

<desc><marker id="binary_to_float-1"/>

<p>returns a float whose binary representation is Bin</p>
</desc></func>
<func>
<name>binary_to_integer(Bin::binary(), Default::integer()) -&gt; integer()</name>
<fsummary>returns an integer whose binary representation is Bin.</fsummary>

<desc><marker id="binary_to_integer-2"/>

<p>returns an integer whose binary representation is Bin.
  If Bin is not a integer, Default is returned</p>
</desc></func>
<func>
<name>binary_to_float(Bin::binary(), Default::float() | undefined) -&gt; float() | undefined</name>
<fsummary>returns a float whose binary representation is Bin.</fsummary>

<desc><marker id="binary_to_float-2"/>

<p>returns a float whose binary representation is Bin.
  If Bin is not a float, Default is returned</p>
</desc></func>
<func>
<name>integer_to_binary(Int::binary()) -&gt; integer()</name>
<fsummary>returns a binary whose integer representation is Int.</fsummary>

<desc><marker id="integer_to_binary-1"/>

<p>returns a binary whose integer representation is Int</p>
</desc></func>
<func>
<name>make_pairs(KVs::[any()]) -&gt; [{any(), any()}]</name>
<fsummary>returns a list of binary tuples.</fsummary>

<desc><marker id="make_pairs-1"/>

<p>returns a list of binary tuples. The first tuple contains the first pair of elements in the received list,
  the second tuple contains the second pair and so on.
  If the received list is odd, the last element will be ignored</p>
</desc></func>
<func>
<name>glob_to_re(Pattern::binary()) -&gt; binary()</name>
<fsummary>converts the GLOB into reg exp.</fsummary>

<desc><marker id="glob_to_re-1"/>

<p>converts the GLOB into reg exp</p>
</desc></func>
<func>
<name>random_binary() -&gt; binary()</name>
<fsummary>returns a random binary.</fsummary>

<desc><marker id="random_binary-0"/>

<p>returns a random binary</p>
</desc></func>
<func>
<name>join(Bins::[binary()], Sep::binary()) -&gt; binary()</name>
<fsummary>joins the list of binaries with Sep.</fsummary>

<desc><marker id="join-2"/>

<p>joins the list of binaries with Sep</p>
</desc></func>
<func>
<name>load_config(File::string()) -&gt; ok</name>
<fsummary>Loads an Erlang config file and sets the corresponding application environment variables.</fsummary>

<desc><marker id="load_config-1"/>

<p>Loads an Erlang config file and sets the corresponding application environment variables</p>
</desc></func></funcs>

<authors>

<aname>Fernando Benavides</aname>
<email>fernando.benavides@inakanetworks.com</email>
<aname>Chad DePue</aname>
<email>chad@inakanetworks.com</email></authors></erlref>